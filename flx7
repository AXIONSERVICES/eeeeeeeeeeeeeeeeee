local MIN_MONEY_THRESHOLD = 100000
local MONEY_RANGES = {
    LOW = 1000000,
    HIGH = 10000000
}

local seenServers = {}
local visitedServers = {}
local busy = false
local lastJob = nil
local notified = {}

function getWebhookForMoney(moneyNum)
    if moneyNum >= MONEY_RANGES.HIGH then
        return webhook_10m_plus
    elseif moneyNum >= MONEY_RANGES.LOW then
        return webhook_1m_10m
    else
        return webhook_fallback
    end
end

function sendMessage(msg, webhookUrl)
    local http = game:GetService("HttpService")
    local payload = http:JSONEncode({ content = msg })
    
    local targetWebhook = webhookUrl or webhook_fallback

    request({
        Url = targetWebhook,
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = payload
    })
end

function sendDiscordEmbed(title, desc, color, fields, webhookUrl, shouldPing)
    local http = game:GetService("HttpService")
    
    local embed = {
        title = title,
        description = desc,
        color = color or 0x8aaef2,
        fields = fields,
        timestamp = os.date("!%Y-%m-%dT%H:%M:%S.000Z"),
        footer = {
            text = "Made by @Flx7mod"
        }
    }
    
    local data = {
        embeds = {embed}
    }
    
    if shouldPing then
        data.content = "<@&1402756123248955414>"
    end
    
    local targetWebhook = webhookUrl or webhook_fallback
    
    spawn(function()
        pcall(function()
            request({
                Url = targetWebhook,
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = http:JSONEncode(data)
            })
        end)
    end)
end

function sendEmbeds(embeds, webhookUrl)
    local http = game:GetService("HttpService")
    
    local data = {
        embeds = embeds
    }
    
    local targetWebhook = webhookUrl or webhook_fallback
    
    request({
        Url = targetWebhook,
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = http:JSONEncode(data)
    })
end

local function parseMoney(text)
    local num = text:match("([%d%.]+)")
    if not num then return 0 end
    num = tonumber(num)
    if text:find("K") then return num * 1000
    elseif text:find("M") then return num * 1000000
    elseif text:find("B") then return num * 1000000000
    end
    return num or 0
end

function formatMoneyDisplay(moneyNum)
    print("Formatting moneyNum:", moneyNum)
    if moneyNum >= 1000000000 then
        local result = "$" .. string.format("%.1f", moneyNum / 1000000000) .. "b/s"
        print("Formatted result:", result)
        return result
    elseif moneyNum >= 1000000 then
        local result = "$" .. string.format("%.1f", moneyNum / 1000000) .. "m/s"
        print("Formatted result:", result)
        return result
    elseif moneyNum >= 1000 then
        local result = "$" .. string.format("%.1f", moneyNum / 1000) .. "k/s"
        print("Formatted result:", result)
        return result
    else
        local result = "$" .. tostring(moneyNum) .. "/s"
        print("Formatted result:", result)
        return result
    end
end

function getPlayerCount()
    local players = game:GetService("Players")
    local count = #players:GetPlayers()
    local max = game.PlaceId and 8 or 8
    return string.format("%d/%d", count, max)
end

function findBestBrainrot()
    if not workspace or not workspace.Plots then
        return nil
    end
    
    local bestBrainrot, bestValue = nil, 0
    local playerCount = #game:GetService("Players"):GetPlayers()

    for _, plot in pairs(workspace.Plots:GetChildren()) do
        local podiums = plot:FindFirstChild("AnimalPodiums")
        if podiums then
            for _, podium in pairs(podiums:GetChildren()) do
                local overhead = podium:FindFirstChild("Base")
                if overhead then
                    overhead = overhead:FindFirstChild("Spawn")
                    if overhead then
                        overhead = overhead:FindFirstChild("Attachment")
                        if overhead then
                            overhead = overhead:FindFirstChild("AnimalOverhead")
                            if overhead then
                                local brainrotData = {
                                    name = "Unknown", moneyPerSec = "$0/s", value = "$0",
                                    playerCount = playerCount
                                }

                                for _, label in pairs(overhead:GetChildren()) do
                                    if label:IsA("TextLabel") then
                                        local text = label.Text
                                        if text:find("/s") then
                                            brainrotData.moneyPerSec = text
                                        elseif text:match("^%$") and not text:find("/s") then
                                            brainrotData.value = text
                                        else
                                            brainrotData.name = text
                                        end
                                    end
                                end

                                local numericValue = parseMoney(brainrotData.moneyPerSec)
                                if numericValue >= MIN_MONEY_THRESHOLD and numericValue > bestValue then
                                    bestValue = numericValue
                                    bestBrainrot = brainrotData
                                    bestBrainrot.numericMPS = numericValue
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    return bestBrainrot
end

function hopServer()
    local teleport = game:GetService("TeleportService")
    local players = game:GetService("Players")
    local http = game:GetService("HttpService")
    
    local currentJob = game.JobId
    local placeId = game.PlaceId
    
    local maxTries = 2
    local tries = 0
    
    while tries < maxTries do
        tries = tries + 1
        
        local success, serverInfo = pcall(function()
            return http:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"))
        end)
        
        if success and serverInfo and serverInfo.data then
            local goodServers = {}
            for _, server in pairs(serverInfo.data) do
                if server.id and server.playing and server.playing < server.maxPlayers and server.playing >= 1 and not visitedServers[server.id] then
                    table.insert(goodServers, server)
                end
            end
            
            if #goodServers > 0 then
                local randomServer = goodServers[math.random(1, #goodServers)]

                visitedServers[randomServer.id] = true
                local visitedCount = 0
                for _ in pairs(visitedServers) do
                    visitedCount = visitedCount + 1
                end
                
                if visitedCount > 5 then
                    local oldestServer = nil
                    for serverId in pairs(visitedServers) do
                        if not oldestServer then
                            oldestServer = serverId
                        end
                    end
                    if oldestServer then
                        visitedServers[oldestServer] = nil
                    end
                end
                                
                pcall(function()
                    teleport:TeleportToPlaceInstance(placeId, randomServer.id, players.LocalPlayer)
                end)
                return
            end
        end
        wait(0.001)
    end
    
    pcall(function()
        teleport:TeleportToPlaceInstance(placeId, "random", players.LocalPlayer)
    end)
end

function notifyBrainrot()
    if busy then
        return
    end
    
    busy = true
    
    local success, bestBrainrot = pcall(function()
        return findBestBrainrot()
    end)
    
    if not success then
        print("Error finding brainrot:", bestBrainrot)
        hopServer()
        spawn(function()
            wait(0.5)
            busy = false
        end)
        return
    end
    
    if bestBrainrot then
        local players = getPlayerCount()
        local jobId = game.JobId or "Unknown"
        local brainrotKey = jobId .. "_" .. bestBrainrot.name .. "_" .. bestBrainrot.moneyPerSec
        
        if not notified[brainrotKey] then
            notified[brainrotKey] = true
            lastJob = jobId
            
            local targetWebhook = getWebhookForMoney(bestBrainrot.numericMPS)
            local shouldPing = bestBrainrot.numericMPS >= MONEY_RANGES.HIGH
            
            local fields = {
                {
                    name = "üè∑Ô∏è Name",
                    value = bestBrainrot.name,
                    inline = true
                },
                {
                    name = "üí∞ Money per sec",
                    value = bestBrainrot.moneyPerSec,
                    inline = true
                },
                {
                    name = "üë• Players",
                    value = players,
                    inline = true
                },
                {
                    name = "Job ID (Mobile)",
                    value = "`" .. jobId .. "`",
                    inline = false
                },
                {
                    name = "Job ID (PC)",
                    value = "```" .. jobId .. "```",
                    inline = false
                },
                {
                    name = "Join Script (PC)",
                    value = "```game:GetService(\"TeleportService\"):TeleportToPlaceInstance(109983668079237,\"" .. jobId .. "\",game.Players.LocalPlayer)```",
                    inline = false
                }
            }
            
            sendDiscordEmbed("Private Notifier", "", 0x8aaef2, fields, targetWebhook, shouldPing)
        end
        
        hopServer()
    else
        hopServer()
    end
    
    spawn(function()
        wait(0.5)
        busy = false
    end)
end

function retryLoop()
    while true do
        wait(0.1)
        local success, error = pcall(function()
            notifyBrainrot()
        end)
        
        if not success then
            print("Error in retryLoop:", error)
            wait(0.5)
        end
    end
end

spawn(retryLoop)

pcall(function()
    notifyBrainrot()
end) 
